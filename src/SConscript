import os
from copy import copy
from utils.codeblocks import generate_codeblocks_project

Import( "confenv" )

# Configuration.
sourcefiles = Glob( "*.cpp" )
sourcefiles += Glob( "Engines/*.cpp" )
sourcefiles += Glob( "Loaders/*.cpp" )
sourcefiles += Glob( "../ext/yaml-cpp-0.2.5/src/*.cpp" )

incpaths     = ["../include/", "../ext/yaml-cpp-0.2.5/include/"]
libpaths     = []
addtlibs     = []
bintarget    = "../lib/sfgui"
cbtarget     = "../build/codeblocks/SFGUI.cbp"

env = confenv.Clone( LIBPATH = libpaths, CPPPATH = incpaths )
env.Append( LIBS = addtlibs )

if env["codeblocks"] != 0:
	cb_builder = Builder( action = generate_codeblocks_project )
	env.Append( BUILDERS = {"CodeBlocksProject": cb_builder} )
	env["cb_template_filename"] = os.path.join( "build", "codeblocks", "template.xml" )
	env["cb_source_path_prefix"] = os.path.join( "..", ".." )
	cb_source_files = copy( sourcefiles )
	cb_source_files += Glob( "../include/SFGUI/*.hpp" )
	cb_source_files += Glob( "../include/SFGUI/*.inl" )
	cb_project = env.CodeBlocksProject( target = os.path.join( "..", "build", "codeblocks", "SFGUI.cbp" ), source = cb_source_files )
else:
	binlib = env.SharedLibrary( target = bintarget, source = sourcefiles )

headers  = Glob( "../include/SFGUI/*.hpp" )
headers += Glob( "../include/SFGUI/*.inl" )
for header in headers:
	env.Alias( "install", env.Install( os.path.join( confenv["prefix"], "include", "SFGUI" ), header ) )

headers = Glob( "../include/SFGUI/Engines/*.hpp" )
for header in headers:
	env.Alias( "install", env.Install( os.path.join( confenv["prefix"], "include", "SFGUI", "Engines" ), header ) )

env.Alias( "install", env.Install( os.path.join( confenv["prefix"], "lib" ), binlib ) )
env.Alias( "install", env.Install( os.path.join( confenv["prefix"], "include" ), ["../include/SFGUI"] ) )
